require('babel-polyfill');
require('babel-register');

const app = require('../app');
const ssl = require('../config.json').ssl;
const serverlog = require('serverlog-node');
const logger = serverlog.getLogger('www');
const defaultPort = require('../config.json').index.defaultPort;

var port = normalizePort(process.env.PORT || defaultPort);
app.set('port', port);

let server;
if (ssl.enable) {
    // 创建 HTTPS
    const https = require('https');
    const fs = require('fs');
    try {
        const privateKey  = fs.readFileSync(ssl.key, 'utf8');
        const certificate = fs.readFileSync(ssl.cert, 'utf8');
        server = https.createServer({
            key: privateKey,
            cert: certificate
        }, app);
    } catch (err) {
        logger.error('未能成功读取SSL私钥或证书文件！Error:', err);
        process.exit(1);
    }
} else {
    // 创建 HTTP
    const http = require('http');
    server = http.createServer(app);
}
server.listen(port, () => {
    logger.info('the database practice project is listening on port', port, 'with pid', process.pid);
});

server.on('error', onError);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
